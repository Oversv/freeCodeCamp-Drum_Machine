{"version":3,"sources":["components/DrumPad.js","components/BoxPad.js","components/Display.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","audioKey","e","clipName","audioRef","current","id","key","toUpperCase","play","handleAudioKey","audioClick","handleAudioClick","React","createRef","document","addEventListener","this","removeEventListener","value","audioUrl","className","onClick","onKeyDown","tabIndex","src","ref","Component","BoxPad","drumPads","map","i","toString","Display","display","Header","App","setState","state","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10d7a62e.chunk.js","sourcesContent":["import React from 'react'\n\nclass DrumPad extends React.Component{\n    \n    constructor(props){\n        super(props)\n\n        this.audioRef = React.createRef();       \n    }    \n\n    audioKey = (e) =>{        \n        \n        let clipName;\n\n        if(this.audioRef.current.id === e.key.toUpperCase()){ \n  \n            this.audioRef.current.play()       \n           \n            clipName = this.props.clipName;\n            const handleAudioKey = this.props.handleAudioKey       \n            handleAudioKey(clipName)\n        }  \n    }\n\n    audioClick = ()=>{ \n        \n        this.audioRef.current.play()  \n\n        let clipName = this.props.clipName;\n        const handleAudioClick = this.props.handleAudioClick  \n        handleAudioClick(clipName)\n    }    \n\n    /***Para que se pueda usar el keydown sin tener que hacer el focus en alguno de los botones ***/\n    componentDidMount(){\n        document.addEventListener('keydown', this.audioKey)  \n    }\n      \n    componentWillUnmount(){ \n        document.removeEventListener('keydown', this.audioKey);\n    }\n    /*** Fin ***/\n\n    render(){\n        const {value, audioUrl} = this.props\n\n        return(\n           <>   \n            <div className=\"col-4\" >\n                       \n                <div\n                    className=\"drum-pad bg-dark text-warning controls\" \n                    id={value}  \n                    onClick = {this.audioClick} \n                    onKeyDown = {this.audioKey}                   \n                    tabIndex=\"0\" //Para que se detecte el keyDown\n                    >{value}\n                    \n                    <audio \n                        className =\"clip\"\n                        id={value} \n                        src={audioUrl}                        \n                        ref={this.audioRef}\n                    />  \n                </div>\n\n            </div>    \n           \n            </>\n        )\n    }\n\n}\n\nexport default DrumPad","import React from 'react'\nimport DrumPad from './DrumPad'\n\nfunction BoxPad(props){\n\n    return(\n        <>  \n            {\n                props.drumPads.map((e, i)=>{\n                    return <DrumPad \n                            value ={e.value} \n                            audioUrl = {e.audioUrl}\n                            clipName ={e.clipName}\n                            key = {i.toString()}\n                            handleAudioClick = {props.handleAudioClick}\n                            handleAudioKey = {props.handleAudioKey}\n                            />\n                })\n            }\n        </>\n    )    \n\n}\n\nexport default BoxPad","import React from 'react'\n\nclass Display extends React.Component{\n    \n    render(){\n        return(\n        <div id=\"display\" className=\"display\">{this.props.display}</div>\n        )\n    }\n}\n\nexport default Display","import React from 'react'\n\nfunction Header(){\n    return (      \n        <nav className=\"navbar justify-content-center\">\n            <h1 className=\"navbar-text h3 text-center\">React Drum Machine</h1>\n        </nav>\n    )\n}\n\nexport default Header","import React from 'react';\nimport './App.css';\nimport BoxPad from './components/BoxPad'\nimport Display from './components/Display'\nimport Header from './components/Header';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this.state={  \n      drumPads: [\n        {\n          value: \"Q\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n          clipName: 'Heater 1'       \n        },\n        {\n          value: \"W\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n          clipName: 'Heater 2'       \n        },\n        {\n          value: \"E\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n          clipName: 'Heater 3'       \n\n        },\n        {\n          value: \"A\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n          clipName: 'Heater 4'       \n        },\n        {\n          value: \"S\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n          clipName: 'Heater 6'       \n        },\n        {\n          value: \"D\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n          clipName: 'DSC'\n        },\n        {\n          value: \"Z\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n          clipName: 'Kick Hat'\n        },\n        {\n          value: \"X\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n          clipName: 'Kick 1'\n        },\n        {\n          value: \"C\",\n          audioUrl: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n          clipName: 'Cev'\n        }\n      ], \n      display : ''\n    }  \n  }\n\n  handleAudioKey = (clipName)=>{  \n    \n    this.setState({display: clipName}) \n  }\n\n  handleAudioClick = (clipName)=>{ \n\n    this.setState({display: clipName})    \n  }\n\n  render(){\n\n    return (\n      <div >\n        <Header/>       \n        <div className=\"d-flex flex-row container bg-secondary boxSize \">\n          <div id=\"drum-machine\" className=\"row no-gutters\">\n            <BoxPad \n              drumPads = {this.state.drumPads}\n              handleAudioKey = {this.handleAudioKey}\n              handleAudioClick = {this.handleAudioClick}\n            />\n          </div>\n            <Display display ={this.state.display}/>\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}